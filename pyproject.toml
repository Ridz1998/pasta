[project]
name = "pasta"
version = "0.1.0"
description = "Cross-platform clipboard to keyboard system tray application"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "James Brink", email = "your.email@example.com"}
]
keywords = ["clipboard", "productivity", "system-tray", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment",
    "Topic :: Utilities",
]

dependencies = [
    "pystray>=0.19.0",
    "pyperclip>=1.8.0",
    "pyautogui>=0.9.50",
    "pillow>=10.0.0",
    "PyQt6>=6.4.0",
    "psutil>=5.9.0",
    "cryptography>=41.0.0",
    "keyboard>=0.13.5",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xvfb>=3.0.0",
    "pytest-timeout>=2.2.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "types-psutil>=5.9.0",
    "pyinstaller>=6.0.0",
]

[project.scripts]
pasta = "pasta.__main__:main"

[project.gui-scripts]
pasta-gui = "pasta.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/pasta"]

[tool.ruff]
target-version = "py39"
line-length = 140
src = ["src"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "N",    # pep8-naming
    "D",    # pydocstyle
]
ignore = [
    "E501",  # line length (handled by formatter)
    "B008",  # function calls in argument defaults
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "ARG", "PLR2004", "D"]
"__init__.py" = ["D"]

[tool.ruff.lint.isort]
known-first-party = ["pasta"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pystray.*",
    "pyperclip.*",
    "pyautogui.*",
    "PIL.*",
    "keyboard.*",
    "grp",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --timeout=30"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
timeout = 30
timeout_method = "thread"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gui: marks tests that require GUI",
]

[tool.coverage.run]
source = ["src/pasta"]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false
precision = 2
